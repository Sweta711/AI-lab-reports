from collections import deque

class WaterJug:
    def __init__(self, initial_state=(4, 0), goal_state=(2, 0)):
        self.initial_state = initial_state  # Initial state: (4, 0)
        self.goal_state = goal_state  # Goal state: (2, 0)

    def goalTest(self, current_state):
        """Check if the current state is the goal state."""
        return current_state == self.goal_state

    def successors(self, state):
        """Generate possible successors of the current state."""
        X, Y = state
        succ = []

        # Action 1: Fill Jug X
        if X < 4:
            succ.append((4, Y))

        # Action 2: Fill Jug Y
        if Y < 3:
            succ.append((X, 3))

        # Action 3: Empty Jug X
        if X > 0:
            succ.append((0, Y))

        # Action 4: Empty Jug Y
        if Y > 0:
            succ.append((X, 0))

        # Action 5: Pour from X to Y
        if X > 0 and Y < 3:
            transfer = min(X, 3 - Y)
            succ.append((X - transfer, Y + transfer))

        # Action 6: Pour from Y to X
        if Y > 0 and X < 4:
            transfer = min(Y, 4 - X)
            succ.append((X + transfer, Y - transfer))

        return succ

    def bfs(self):
        """Breadth-First Search algorithm."""
        open_queue = deque([(self.initial_state, None)])  # (state, parent)
        closed_set = {}

        while open_queue:
            current_state, parent = open_queue.popleft()

            if current_state in closed_set:
                continue

            closed_set[current_state] = parent

            if self.goalTest(current_state):
                return self.generate_path(closed_set)

            for succ in self.successors(current_state):
                if succ not in closed_set:
                    open_queue.append((succ, current_state))

        return None

    def dfs(self):
        """Depth-First Search algorithm."""
        open_stack = [(self.initial_state, None)]  # (state, parent)
        closed_set = {}

        while open_stack:
            current_state, parent = open_stack.pop()

            if current_state in closed_set:
                continue

            closed_set[current_state] = parent

            if self.goalTest(current_state):
                return self.generate_path(closed_set)

            for succ in self.successors(current_state):
                if succ not in closed_set:
                    open_stack.append((succ, current_state))

        return None

    def generate_path(self, closed_set):
        """Generate the path from the goal state to the initial state."""
        path = []
        state = self.goal_state

        while state is not None:
            path.append(state)
            state = closed_set[state]

        return path[::-1]

# Test the WaterJug class
if __name__ == "__main__":
    # Create an instance of the WaterJug class
    water_jug = WaterJug()

    # Run BFS
    print("Solution using BFS:")
    bfs_solution = water_jug.bfs()
    if bfs_solution:
        for step in bfs_solution:
            print(step)
    else:
        print("No solution found")

    # Run DFS
    print("\nSolution using DFS:")
    dfs_solution = water_jug.dfs()
    if dfs_solution:
        for step in dfs_solution:
            print(step)
    else:
        print("No solution found")


Solution using BFS:
(4, 0)
(1, 3)
(1, 0)
(0, 1)
(4, 1)
(2, 3)
(2, 0)

Solution using DFS:
(4, 0)
(1, 3)
(1, 0)
(0, 1)
(0, 0)
(0, 3)
(3, 0)
(3, 3)
(4, 2)
(0, 2)
(2, 0)
