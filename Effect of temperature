import math
import random
import matplotlib.pyplot as plt

def probability(delta_energy, temperature):
    """
    Calculate the probability of choosing an inferior node based on the energy difference (delta_energy)
    and the current temperature.
    """
    if delta_energy >= 0:
        return 1.0  # Always accept if the new state is better or equal
    return math.exp(delta_energy / temperature)

def simulated_annealing(initial_state, energy_function, temperature_schedule, iterations):
    """
    Simulated Annealing Algorithm.
    - initial_state: The starting state.
    - energy_function: A function to evaluate the quality of a state.
    - temperature_schedule: A function that defines the temperature over iterations.
    - iterations: Total iterations to run.
    """
    current_state = initial_state
    current_energy = energy_function(current_state)
    states = [current_state]
    energies = [current_energy]
    probabilities = []

    for t in range(1, iterations + 1):
        temperature = temperature_schedule(t)
        if temperature <= 0:
            break

        # Generate a neighbor state randomly (simple example: add/subtract random value)
        new_state = current_state + random.uniform(-1, 1)
        new_energy = energy_function(new_state)
        delta_energy = new_energy - current_energy

        # Calculate acceptance probability
        prob = probability(delta_energy, temperature)
        probabilities.append(prob)

        # Accept or reject the new state
        if random.random() < prob:
            current_state = new_state
            current_energy = new_energy

        # Record the state and energy
        states.append(current_state)
        energies.append(current_energy)

    return states, energies, probabilities

def energy_function(state):
    """
    Example energy function: The closer to 0, the better the state.
    """
    return abs(state)

def temperature_schedule(t):
    """
    Example temperature schedule: Exponential decay.
    """
    initial_temperature = 10
    cooling_rate = 0.01
    return initial_temperature * math.exp(-cooling_rate * t)

# Parameters
initial_state = 5  # Starting point
iterations = 1000

# Run Simulated Annealing
states, energies, probabilities = simulated_annealing(
    initial_state,
    energy_function,
    temperature_schedule,
    iterations
)

# Visualization
plt.figure(figsize=(12, 6))

# Plot the energy function over iterations
plt.subplot(2, 1, 1)
plt.plot(energies, label="Energy")
plt.title("Energy Over Iterations")
plt.xlabel("Iteration")
plt.ylabel("Energy")
plt.legend()

# Plot the probability of accepting inferior nodes over iterations
plt.subplot(2, 1, 2)
plt.plot(probabilities, label="Acceptance Probability", color="red")
plt.title("Probability of Accepting Inferior Nodes Over Iterations")
plt.xlabel("Iteration")
plt.ylabel("Probability")
plt.legend()

plt.tight_layout()
plt.show()



